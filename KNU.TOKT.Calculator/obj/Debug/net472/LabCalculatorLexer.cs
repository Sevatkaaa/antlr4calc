//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Sov\Source\Repos\antlr-calculator\KNU.TOKT.Calculator\LabCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace KNU.TOKT.Calculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LabCalculatorLexer : Lexer {
	public const int
		PLUS=1, MINUS=2, MULTIPLY=3, DIVIDE=4, POWER=5, LPAREN=6, RPAREN=7, COMMA=8, 
		SIN=9, COS=10, TAN=11, INTEGER=12, FLOAT=13;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"DIGIT", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "POWER", "LPAREN", "RPAREN", 
		"COMMA", "SIN", "COS", "TAN", "INTEGER", "FLOAT"
	};


	public LabCalculatorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'", "','", "'sin'", 
		"'cos'", "'tg'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "POWER", "LPAREN", "RPAREN", 
		"COMMA", "SIN", "COS", "TAN", "INTEGER", "FLOAT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\xFL\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x3\x2"+
		"\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b"+
		"\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\r"+
		"\x3\r\x3\r\x3\xE\x6\xE>\n\xE\r\xE\xE\xE?\x3\xF\x6\xF\x43\n\xF\r\xF\xE"+
		"\xF\x44\x3\xF\x3\xF\x6\xFI\n\xF\r\xF\xE\xFJ\x2\x2\x2\x10\x3\x2\x2\x5\x2"+
		"\x3\a\x2\x4\t\x2\x5\v\x2\x6\r\x2\a\xF\x2\b\x11\x2\t\x13\x2\n\x15\x2\v"+
		"\x17\x2\f\x19\x2\r\x1B\x2\xE\x1D\x2\xF\x3\x2\x3\x3\x2\x32;M\x2\x5\x3\x2"+
		"\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2"+
		"\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3"+
		"\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2"+
		"\x1D\x3\x2\x2\x2\x3\x1F\x3\x2\x2\x2\x5!\x3\x2\x2\x2\a#\x3\x2\x2\x2\t%"+
		"\x3\x2\x2\x2\v\'\x3\x2\x2\x2\r)\x3\x2\x2\x2\xF+\x3\x2\x2\x2\x11-\x3\x2"+
		"\x2\x2\x13/\x3\x2\x2\x2\x15\x31\x3\x2\x2\x2\x17\x35\x3\x2\x2\x2\x19\x39"+
		"\x3\x2\x2\x2\x1B=\x3\x2\x2\x2\x1D\x42\x3\x2\x2\x2\x1F \t\x2\x2\x2 \x4"+
		"\x3\x2\x2\x2!\"\a-\x2\x2\"\x6\x3\x2\x2\x2#$\a/\x2\x2$\b\x3\x2\x2\x2%&"+
		"\a,\x2\x2&\n\x3\x2\x2\x2\'(\a\x31\x2\x2(\f\x3\x2\x2\x2)*\a`\x2\x2*\xE"+
		"\x3\x2\x2\x2+,\a*\x2\x2,\x10\x3\x2\x2\x2-.\a+\x2\x2.\x12\x3\x2\x2\x2/"+
		"\x30\a.\x2\x2\x30\x14\x3\x2\x2\x2\x31\x32\au\x2\x2\x32\x33\ak\x2\x2\x33"+
		"\x34\ap\x2\x2\x34\x16\x3\x2\x2\x2\x35\x36\a\x65\x2\x2\x36\x37\aq\x2\x2"+
		"\x37\x38\au\x2\x2\x38\x18\x3\x2\x2\x2\x39:\av\x2\x2:;\ai\x2\x2;\x1A\x3"+
		"\x2\x2\x2<>\x5\x3\x2\x2=<\x3\x2\x2\x2>?\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3"+
		"\x2\x2\x2@\x1C\x3\x2\x2\x2\x41\x43\x5\x3\x2\x2\x42\x41\x3\x2\x2\x2\x43"+
		"\x44\x3\x2\x2\x2\x44\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\x46\x3\x2"+
		"\x2\x2\x46H\a\x30\x2\x2GI\x5\x3\x2\x2HG\x3\x2\x2\x2IJ\x3\x2\x2\x2JH\x3"+
		"\x2\x2\x2JK\x3\x2\x2\x2K\x1E\x3\x2\x2\x2\x6\x2?\x44J\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace KNU.TOKT.Calculator
